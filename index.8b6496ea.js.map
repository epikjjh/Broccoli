{"mappings":"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","sources":["<anon>","app.js"],"sourcesContent":["const $6b17f08f738443dc$var$NEWS_URL = 'https://api.hnpwa.com/v0/news/{page}.json';\nconst $6b17f08f738443dc$var$CONTENT_URL = 'https://api.hnpwa.com/v0/item/{id}.json';\nconst $6b17f08f738443dc$var$HF_API_URL = 'https://api-inference.huggingface.co/models/sshleifer/distilbart-cnn-12-6';\nconst $6b17f08f738443dc$var$initialPage = 1;\nconst $6b17f08f738443dc$var$maxPage = 10;\nasync function $6b17f08f738443dc$var$summarizeText(text) {\n    try {\n        const response = await fetch($6b17f08f738443dc$var$HF_API_URL, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${\"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\"}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                inputs: text,\n                parameters: {\n                    max_length: 150,\n                    min_length: 40,\n                    length_penalty: 2.0,\n                    num_beams: 4,\n                    early_stopping: true\n                }\n            })\n        });\n        if (!response.ok) throw new Error('Failed to get summary');\n        const result = await response.json();\n        return result[0].summary_text;\n    } catch (error) {\n        console.error('Summarization error:', error);\n        return 'Failed to generate summary';\n    }\n}\nasync function $6b17f08f738443dc$export$6be879aaed7294f2(rootElementParam, currentPage) {\n    // Use passed element or try to find it in DOM\n    const rootElement = rootElementParam || document.getElementById('root');\n    if (!rootElement) throw new Error('Root element not found');\n    const ul = document.createElement('ul');\n    window.addEventListener('hashchange', async ()=>{\n        const id = location.hash.substring(1);\n        const summary = document.createElement('div');\n        try {\n            // Show loading state\n            rootElement.innerHTML = 'Loading...';\n            // Fetch the item details\n            const response = await fetch($6b17f08f738443dc$var$CONTENT_URL.replace('{id}', id));\n            const content = await response.json();\n            // Create a back button\n            const backButton = document.createElement('button');\n            backButton.innerHTML = \"\\u2190 Back to News\";\n            backButton.addEventListener('click', ()=>{\n                location.hash = '';\n                $6b17f08f738443dc$export$6be879aaed7294f2(rootElement, currentPage);\n            });\n            // Prepare content for summarization\n            const textToSummarize = `\n        Title: ${content.title}\n        URL Content: ${content.url ? content.url : 'No URL'}\n        Comments: ${content.comments ? content.comments.map((c)=>c.content).join('\\n') : 'No comments'}\n      `;\n            // Use transformers.js for summarization\n            console.log(textToSummarize);\n            const result = await $6b17f08f738443dc$var$summarizeText(textToSummarize);\n            const summarizedContent = result[0].summary_text;\n            // Display the summary\n            summary.innerHTML = `\n        <h2>${content.title}</h2>\n        <p><strong>Summary:</strong></p>\n        <p>${summarizedContent}</p>\n        <p><strong>Original URL:</strong> <a href=\"${content.url}\" target=\"_blank\">${content.url}</a></p>\n        <p><strong>Comments:</strong> ${content.comments_count || 0}</p>\n      `;\n            rootElement.innerHTML = '';\n            rootElement.appendChild(backButton);\n            rootElement.appendChild(summary);\n        } catch (error) {\n            console.error('Error:', error);\n            rootElement.innerHTML = 'Error loading content';\n        }\n    });\n    try {\n        // Show loading state\n        rootElement.innerHTML = 'Loading...';\n        const response = await fetch($6b17f08f738443dc$var$NEWS_URL.replace('{page}', currentPage));\n        const newsFeed = await response.json();\n        newsFeed.forEach((item)=>{\n            const li = document.createElement('li');\n            const a = document.createElement('a');\n            a.href = `#${item.id}`;\n            a.innerHTML = `${item.title} (${item.comments_count})`;\n            li.appendChild(a);\n            ul.appendChild(li);\n        });\n        // Clear loading state and show content\n        rootElement.innerHTML = '';\n        rootElement.appendChild(ul);\n    } catch (error) {\n        rootElement.innerHTML = 'Error loading news feed';\n        console.error('Error:', error);\n    }\n    if (currentPage > $6b17f08f738443dc$var$initialPage) {\n        const prevPageButton = document.createElement('button');\n        prevPageButton.innerHTML = 'Previous Page';\n        prevPageButton.addEventListener('click', ()=>{\n            currentPage--;\n            $6b17f08f738443dc$export$6be879aaed7294f2(rootElement, currentPage);\n        });\n        rootElement.appendChild(prevPageButton);\n    }\n    if (currentPage < $6b17f08f738443dc$var$maxPage) {\n        const nextPageButton = document.createElement('button');\n        nextPageButton.innerHTML = 'Next Page';\n        nextPageButton.addEventListener('click', ()=>{\n            currentPage++;\n            $6b17f08f738443dc$export$6be879aaed7294f2(rootElement, currentPage);\n        });\n        rootElement.appendChild(nextPageButton);\n    }\n}\n// Only call loadNews if we're in a browser environment\nif (typeof window !== 'undefined') {\n    const rootElement = document.getElementById('root');\n    if (rootElement) $6b17f08f738443dc$export$6be879aaed7294f2(rootElement, 1);\n}\n\n\n//# sourceMappingURL=index.8b6496ea.js.map\n","const NEWS_URL = 'https://api.hnpwa.com/v0/news/{page}.json';\nconst CONTENT_URL = 'https://api.hnpwa.com/v0/item/{id}.json';\nconst HF_API_URL = 'https://api-inference.huggingface.co/models/sshleifer/distilbart-cnn-12-6';\nconst initialPage = 1;\nconst maxPage = 10;\n\nasync function summarizeText(text) {\n  try {\n    const response = await fetch(HF_API_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.HUGGING_FACE_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        inputs: text,\n        parameters: {\n          max_length: 150,\n          min_length: 40,\n          length_penalty: 2.0,\n          num_beams: 4,\n          early_stopping: true\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get summary');\n    }\n\n    const result = await response.json();\n    return result[0].summary_text;\n  } catch (error) {\n    console.error('Summarization error:', error);\n    return 'Failed to generate summary';\n  }\n}\n\nexport async function loadNews(rootElementParam, currentPage) {\n  // Use passed element or try to find it in DOM\n  const rootElement = rootElementParam || document.getElementById('root');\n\n  if (!rootElement) {\n    throw new Error('Root element not found');\n  }\n\n  const ul = document.createElement('ul');\n\n  window.addEventListener('hashchange', async () => {\n    const id = location.hash.substring(1);\n    const summary = document.createElement('div');\n    \n    try {\n      // Show loading state\n      rootElement.innerHTML = 'Loading...';\n      \n      // Fetch the item details\n      const response = await fetch(CONTENT_URL.replace('{id}', id));\n      const content = await response.json();\n      \n      // Create a back button\n      const backButton = document.createElement('button');\n      backButton.innerHTML = '← Back to News';\n      backButton.addEventListener('click', () => {\n        location.hash = '';\n        loadNews(rootElement, currentPage);\n      });\n      \n      // Prepare content for summarization\n      const textToSummarize = `\n        Title: ${content.title}\n        URL Content: ${content.url ? content.url : 'No URL'}\n        Comments: ${content.comments ? content.comments.map(c => c.content).join('\\n') : 'No comments'}\n      `;\n      \n      // Use transformers.js for summarization\n      console.log(textToSummarize);\n      const result = await summarizeText(textToSummarize);\n      \n      const summarizedContent = result[0].summary_text;\n      \n      // Display the summary\n      summary.innerHTML = `\n        <h2>${content.title}</h2>\n        <p><strong>Summary:</strong></p>\n        <p>${summarizedContent}</p>\n        <p><strong>Original URL:</strong> <a href=\"${content.url}\" target=\"_blank\">${content.url}</a></p>\n        <p><strong>Comments:</strong> ${content.comments_count || 0}</p>\n      `;\n      \n      rootElement.innerHTML = '';\n      rootElement.appendChild(backButton);\n      rootElement.appendChild(summary);\n      \n    } catch (error) {\n      console.error('Error:', error);\n      rootElement.innerHTML = 'Error loading content';\n    }\n  });\n  \n  try {\n    // Show loading state\n    rootElement.innerHTML = 'Loading...';\n    \n    const response = await fetch(NEWS_URL.replace('{page}', currentPage));\n    const newsFeed = await response.json();\n    \n    newsFeed.forEach(item => {\n      const li = document.createElement('li');\n      const a = document.createElement('a');\n      a.href = `#${item.id}`;\n      a.innerHTML = `${item.title} (${item.comments_count})`;\n      li.appendChild(a);\n      ul.appendChild(li);\n    });\n    \n    // Clear loading state and show content\n    rootElement.innerHTML = '';\n    rootElement.appendChild(ul);\n    \n  } catch (error) {\n    rootElement.innerHTML = 'Error loading news feed';\n    console.error('Error:', error);\n  }\n\n  if (currentPage > initialPage) {\n    const prevPageButton = document.createElement('button');\n    prevPageButton.innerHTML = 'Previous Page';\n    prevPageButton.addEventListener('click', () => {\n      currentPage--;\n      loadNews(rootElement, currentPage);\n    });\n    rootElement.appendChild(prevPageButton);\n  }\n\n  if (currentPage < maxPage) {\n    const nextPageButton = document.createElement('button');\n    nextPageButton.innerHTML = 'Next Page';\n    nextPageButton.addEventListener('click', () => {\n      currentPage++;\n      loadNews(rootElement, currentPage);\n    });\n    rootElement.appendChild(nextPageButton);\n  }\n}\n\n\n// Only call loadNews if we're in a browser environment\nif (typeof window !== 'undefined') {\n    const rootElement = document.getElementById('root');\n    if (rootElement) {\n      loadNews(rootElement, 1);\n    }\n}"],"names":["$6b17f08f738443dc$var$summarizeText","text","response","fetch","method","headers","body","JSON","stringify","inputs","parameters","max_length","min_length","length_penalty","num_beams","early_stopping","ok","Error","result","json","summary_text","error","console","$6b17f08f738443dc$export$6be879aaed7294f2","rootElementParam","currentPage","rootElement","document","getElementById","ul","createElement","window","addEventListener","id","location","hash","substring","summary","innerHTML","$6b17f08f738443dc$var$CONTENT_URL","replace","content","backButton","textToSummarize","title","url","comments","map","c","join","log","summarizedContent","comments_count","appendChild","$6b17f08f738443dc$var$NEWS_URL","newsFeed","forEach","item","li","a","href","prevPageButton","nextPageButton","NEWS_URL","CONTENT_URL","HF_API_URL","initialPage","maxPage","summarizeText","process","env","HUGGING_FACE_API_KEY","loadNews"],"version":3,"file":"index.8b6496ea.js.map"}